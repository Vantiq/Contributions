{
  "bodyChildren" : {
    "rootArray" : [ "e2e76396-ec37-4540-842d-808676af1b53" ],
    "widgets" : [ {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "column" : -1,
      "h" : 315,
      "heightPolicy" : "explicit",
      "horzGravity" : "center",
      "name" : "cameraCanvas_15268",
      "row" : 0,
      "type" : "Canvas",
      "uuid" : "1cf72f0e-8a58-4f0d-9020-a0bca75a3d8a",
      "v" : 17,
      "vertGravity" : "center",
      "w" : 568,
      "widthPolicy" : "explicit",
      "x" : 0,
      "y" : 0
    }, {
      "backgroundImagePosition" : "top",
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "ac07cc27-c283-4466-863e-05f10d4a0efc", "f27a10d8-40c5-4025-a275-144f98e22c0b" ],
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "horzMargin" : 0,
      "name" : "HorizontalLayout2162_15268",
      "row" : 0,
      "type" : "HorizontalLayout",
      "uuid" : "20c02296-04e1-4935-b864-a69cd460abda",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 0,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.BoundaryEditor__btn.OK",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "name" : "zoneToolOKbutton",
      "row" : -1,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "568eacc4-3de6-4532-a2ac-699b18cd3624",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "backgroundImagePosition" : "top",
      "backgroundImageSize" : "contain",
      "borderColor" : "Default",
      "borderThickness" : 0,
      "children" : [ "1cf72f0e-8a58-4f0d-9020-a0bca75a3d8a" ],
      "column" : -1,
      "heatmapConfig" : null,
      "heatmapOpacity" : 0.4,
      "heatmapRadius" : 40,
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "horzImageGravity" : "left",
      "horzWeight" : 1,
      "innerMargin" : 20,
      "name" : "cameraLayout_15268",
      "preserveAspectRatio" : true,
      "row" : 0,
      "type" : "FixedLayout",
      "url" : "../../docs/entranceSample.png",
      "uuid" : "8c24b7c6-4134-4687-8678-1467759c2547",
      "v" : 17,
      "vertGravity" : "center",
      "vertImageGravity" : "top",
      "vertWeight" : 1,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 1,
      "children" : [ "8c24b7c6-4134-4687-8678-1467759c2547" ],
      "column" : -1,
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "horzMargin" : 0,
      "innerMargin" : 5,
      "name" : "HorizontalLayout62863_15268",
      "row" : 1,
      "type" : "HorizontalLayout",
      "uuid" : "947287a0-ab0a-47f7-8b8b-6dbd401d6705",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 0,
      "vertWeight" : 1,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.BoundaryEditor__btn.Cancel",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "right",
      "horzWeight" : 1,
      "name" : "zoneToolCancelButton",
      "row" : -1,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "9c47a853-fd35-4289-815c-edb909f80bac",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "column" : -1,
      "fontFamily" : "inherit",
      "fontSize" : 20,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "heightPolicy" : "naturalSize",
      "horzGravity" : "left",
      "horzWeight" : 1,
      "name" : "StaticText113317_15268",
      "row" : 0,
      "text" : "Boundary is defined as a quadrilateral.",
      "type" : "StaticText",
      "uuid" : "ac07cc27-c283-4466-863e-05f10d4a0efc",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "20c02296-04e1-4935-b864-a69cd460abda", "947287a0-ab0a-47f7-8b8b-6dbd401d6705" ],
      "column" : -1,
      "componentConfiguration" : {
        "configurationProperties" : [ {
          "defaultValue" : "    configuration.isLoadingZones = true;\n\n    var cameraLayout = client.getComponentWidget(configuration, \"cameraLayout\");\n    var cameraCanvas = client.getComponentWidget(configuration, \"cameraCanvas\");\n\n    if (configuration.imageUrl) {\n        cameraLayout.url = configuration.imageUrl;\n    }\n\n    // In order to get background image size  of the CameraLayout, need to have a timeout.\n    client.setTimeout(function()\n    {\n        // Resize the canvas to match the image.\n        var widthRatio = cameraLayout.scaledImageWidth/cameraLayout.trueImageWidth;\n        var heightRadio = cameraLayout.scaledImageHeight/cameraLayout.trueImageHeight;\n\n        cameraCanvas.w = Math.min(cameraLayout.w, cameraLayout.scaledImageWidth);\n        cameraCanvas.h = Math.min(cameraLayout.h, cameraLayout.scaledImageHeight);\n\n        cameraLayout.configuration.zonePoints = [];\n        if (boundary) {\n            cameraLayout.configuration.boundary = boundary;\n        } else if (!cameraLayout.configuration.boundary || (cameraLayout.configuration.boundary.length == 0)) {\n            // create a default boundary\n            cameraLayout.configuration.boundary = [];\n\n            var w = cameraLayout.trueImageWidth || 200;\n            var h = cameraLayout.trueImageHeight || 200;\n            var x = w/4;\n            var y = h/4;\n            var zoneWidth = w/2;\n            var zoneHeight = h/2;\n            // create a resion with 4 corer points.\n            cameraLayout.configuration.boundary = [{x: x, y: y},\n                {x:x+zoneWidth, y},\n                {x:x+zoneWidth, y:y+zoneHeight},\n                {x: x, y: y+zoneHeight}\n            ];\n        }\n        // display the boundary\n        // convert region points into the scalled image coord\n        cameraLayout.configuration.zonePoints = [];\n        for (var i = 0; i < cameraLayout.configuration.boundary.length; i++) {\n            cameraLayout.configuration.zonePoints.push({\n                x: cameraLayout.configuration.boundary[i].x * widthRatio,\n                y: cameraLayout.configuration.boundary[i].y * heightRadio\n            });\n        }\n        cameraCanvas.repaint();        \n\n        var nativeCanvas = document.getElementById(cameraCanvas.name).children[0];\n        nativeCanvas.addEventListener('mousedown', function(e) {\n            // check if clicked on one of the boundary points\n            cameraLayout.configuration.draggingPointIndex = -1;\n            for (var i = 0; i < cameraLayout.configuration.zonePoints.length; i++) {\n                var p = cameraLayout.configuration.zonePoints[i];\n                // calculate the distance between mouse click to point center\n                if (com.vantiq.component.ui.isClickedOnDNDPoint(nativeCanvas, p, e)) {\n                    // start dragging\n                    cameraLayout.configuration.draggingPointIndex = i;\n                    p.x = e.offsetX;\n                    p.y = e.offsetY;\n                    cameraCanvas.repaint();\n                    break;\n                }\n            }\n        });\n        nativeCanvas.addEventListener('mousemove', function(e) {\n            if ((e.offsetX < 1) || (e.offsetX > (cameraLayout.scaledImageWidth-1)) ||\n                (e.offsetY < 1) || (e.offsetY > (cameraLayout.scaledImageHeight-1))) {\n                // stop the drag&drop after touching the edge of background image.\n                cameraLayout.configuration.draggingPointIndex = -1;\n            } else if (cameraLayout.configuration.draggingPointIndex >=0 ) {\n                var p = cameraLayout.configuration.zonePoints[cameraLayout.configuration.draggingPointIndex];\n                // update the point and redraw\n                p.x = e.offsetX;\n                p.y = e.offsetY;\n                cameraCanvas.repaint();\n            }\n        });\n        nativeCanvas.addEventListener('mouseup', function(e) {\n            cameraLayout.configuration.draggingPointIndex = -1;\n        });        \n        cameraLayout.configuration.isLoadingZones = false;\n    },500);",
          "description" : "load boundary to be shown.",
          "functionParameters" : [ "boundary" ],
          "hidden" : false,
          "propertyLabel" : "loadBoundary",
          "propertyType" : 62,
          "type" : 1
        }, {
          "defaultValue" : "    var cameraLayout = client.getComponentWidget(configuration, \"cameraLayout\");\n    \n    var widthRatio = cameraLayout.scaledImageWidth / cameraLayout.trueImageWidth;\n    var heightRadio = cameraLayout.scaledImageHeight / cameraLayout.trueImageHeight;\n    var savedPoints = [];\n    for (var i = 0; i < configuration.zonePoints.length; i++) {\n\t\tsavedPoints.push({\n\t\t    x: configuration.zonePoints[i].x / widthRatio,\n\t\t    y: configuration.zonePoints[i].y / heightRadio\n\t\t});\n    }\n    configuration.boundary = savedPoints;    \n\n    // For regions to work, points must be saved in clockwise order.\n    if (configuration.boundary && (configuration.boundary.length > 0)) {\n        const points = configuration.boundary;\n\n        // Find min max to get center, Sort from top to bottom\n        points.sort((a, b) => a.y - b.y);\n\n        // Get center y\n        const cy = (points[0].y + points[points.length - 1].y) / 2;\n\n        // Sort from right to left\n        points.sort((a, b) => b.x - a.x);\n\n        // Get center x\n        const cx = (points[0].x + points[points.length - 1].x) / 2;\n\n        // Center point\n        const center = {x: cx, y: cy};\n\n        // Pre calculate the angles as it will be slow in the sort\n        // As the points are sorted from right to left the first point\n        // is the rightmost\n\n        // Starting angle used to reference other angles\n        var startAng;\n        points.forEach(point => {\n            var ang = Math.atan2(point.y - center.y, point.x - center.x);\n            if (!startAng) {\n                startAng = ang;\n            } else {\n                if (ang < startAng) {  // ensure that all points are clockwise of the start point\n                    ang += Math.PI * 2;\n                }\n            }\n            point.angle = ang; // add the angle to the point\n        });\n\n\n        // Sort clockwise;\n        points.sort((a, b) => a.angle - b.angle);\n\n        // save the new points' x and y only.\n        configuration.boundary = [];\n        points.forEach(point => {\n            configuration.boundary.push({x: point.x, y: point.y});\n        });\n    }\n    \n    return configuration.boundary;\n",
          "description" : "Return the boundary user defined using the component.",
          "functionParameters" : [ "zones" ],
          "hidden" : false,
          "propertyLabel" : "getBoundary",
          "propertyType" : 62,
          "type" : 1
        }, {
          "defaultValue" : null,
          "description" : "Internal object that stores the coordinates used for painting a polygon on screen. it's using the scaled image coordinates.",
          "hidden" : true,
          "propertyLabel" : "zonePoints",
          "propertyType" : 60,
          "type" : 1
        }, {
          "defaultValue" : "../../docs/entranceSample.png",
          "description" : "URL of the image used in defining boundaries.",
          "hidden" : false,
          "propertyLabel" : "imageUrl",
          "propertyType" : 50,
          "type" : 1
        }, {
          "defaultValue" : false,
          "hidden" : true,
          "propertyLabel" : "isLoadingZones",
          "propertyType" : 4,
          "type" : 1
        }, {
          "defaultValue" : null,
          "hidden" : true,
          "propertyLabel" : "boundary",
          "propertyType" : 60,
          "type" : 1
        } ],
        "originalWidgetName" : "DeviceZone"
      },
      "componentName" : "com.vantiq.component.ui.BoundaryEditor",
      "componentSuffix" : "_15268",
      "componentTimestamp" : "2023-09-14T21:19:00.097Z",
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "horzMargin" : 5,
      "innerMargin" : 5,
      "isComponent" : true,
      "name" : "cameraZoneComp",
      "row" : 0,
      "type" : "VerticalLayout",
      "uuid" : "c6c5a2b5-08b5-42f3-8ae3-182d20609c3c",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 5,
      "vertWeight" : 1,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "9c47a853-fd35-4289-815c-edb909f80bac", "568eacc4-3de6-4532-a2ac-699b18cd3624" ],
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "horzMargin" : 0,
      "innerMargin" : 5,
      "name" : "HorizontalLayout55091",
      "row" : -1,
      "type" : "HorizontalLayout",
      "uuid" : "d5b9ef92-8559-44fc-9f5a-8c93f983d1ea",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 0,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "c6c5a2b5-08b5-42f3-8ae3-182d20609c3c", "d5b9ef92-8559-44fc-9f5a-8c93f983d1ea" ],
      "column" : -1,
      "h" : 500,
      "heightPolicy" : "explicit",
      "horzGravity" : "center",
      "innerMargin" : 5,
      "name" : "VerticalLayout84502",
      "row" : -1,
      "type" : "VerticalLayout",
      "uuid" : "e2e76396-ec37-4540-842d-808676af1b53",
      "v" : 17,
      "vertGravity" : "center",
      "w" : 894.906,
      "widthPolicy" : "explicit",
      "x" : 0,
      "y" : 0
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.BoundaryEditor__btn.change.image",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "glyphIcon" : "fa-photo",
      "heightPolicy" : "naturalSize",
      "horzGravity" : "left",
      "name" : "loadImageButton_15268",
      "row" : 3,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "f27a10d8-40c5-4025-a275-144f98e22c0b",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    } ]
  },
  "data" : {
    "properties" : { }
  },
  "footerChildren" : [ ],
  "hasFooter" : false,
  "layoutType" : "browser"
}