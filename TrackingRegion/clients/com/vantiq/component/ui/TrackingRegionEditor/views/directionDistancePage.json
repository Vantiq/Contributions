{
  "bodyChildren" : {
    "rootArray" : [ "453bf4ad-3345-408e-8ebe-e78871c11c38" ],
    "widgets" : [ {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "column" : -1,
      "h" : 314,
      "heightPolicy" : "explicit",
      "horzGravity" : "center",
      "name" : "imageCanvas_80286",
      "row" : -1,
      "type" : "Canvas",
      "uuid" : "096f4f82-a0f6-4173-bfef-52dc0e5e4f95",
      "v" : 17,
      "vertGravity" : "center",
      "w" : 565,
      "widthPolicy" : "explicit",
      "x" : 0,
      "y" : 0
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 1,
      "children" : [ "bf984794-dcbe-4277-a51f-228badb85e60", "d60ebc98-3990-4ac0-8865-f2707ca389f4" ],
      "column" : -1,
      "h" : 500,
      "heightPolicy" : "explicit",
      "horzGravity" : "center",
      "innerMargin" : 20,
      "name" : "VerticalLayout106662",
      "row" : -1,
      "type" : "VerticalLayout",
      "uuid" : "453bf4ad-3345-408e-8ebe-e78871c11c38",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "sizeToCell",
      "x" : 0,
      "y" : 0
    }, {
      "borderColor" : "Default",
      "borderThickness" : 1,
      "children" : [ "096f4f82-a0f6-4173-bfef-52dc0e5e4f95" ],
      "column" : -1,
      "heatmapConfig" : null,
      "heatmapOpacity" : 0.4,
      "heatmapRadius" : 40,
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "horzImageGravity" : "left",
      "innerMargin" : 20,
      "name" : "imageLayout_80286",
      "row" : -1,
      "type" : "FixedLayout",
      "url" : "../../docs/entranceSample.png",
      "uuid" : "488d59ce-6920-4129-9c15-f6024eb6c53d",
      "v" : 17,
      "vertGravity" : "center",
      "vertImageGravity" : "top",
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "488d59ce-6920-4129-9c15-f6024eb6c53d" ],
      "column" : -1,
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "horzMargin" : 5,
      "innerMargin" : 20,
      "name" : "HorizontalLayout107256_80286",
      "row" : 1,
      "type" : "HorizontalLayout",
      "uuid" : "4e474b15-48ed-434c-8057-e7fcf199dd2d",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 5,
      "vertWeight" : 1,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "b383d868-333a-428a-85f8-d7a0f12ff95e", "b1a0ceeb-326f-4e06-8ac9-354cfe5a1f4b", "dd69f535-6f3c-4908-b226-8d0f936b75f7" ],
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "horzMargin" : 5,
      "innerMargin" : 20,
      "name" : "HorizontalLayout107255_80286",
      "row" : 0,
      "type" : "HorizontalLayout",
      "uuid" : "5f5dc7d3-dc81-460f-81b1-f1dd486e32cd",
      "v" : 17,
      "vertGravity" : "center",
      "vertMargin" : 5,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.BoundaryEditor__btn.Cancel",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "right",
      "horzWeight" : 1,
      "name" : "dirdisBtnCancel",
      "row" : -1,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "84e0b4c5-d136-4c4b-8661-f8474c2c64ba",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "column" : -1,
      "defaultValue" : null,
      "flavor" : "text",
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "maxValue" : 100,
      "minValue" : 0,
      "name" : "valueInput_80286",
      "optional" : true,
      "placeholder" : "",
      "row" : 0,
      "type" : "InputInteger",
      "units" : "",
      "uuid" : "b1a0ceeb-326f-4e06-8ac9-354cfe5a1f4b",
      "v" : 17,
      "vertGravity" : "center",
      "w" : 200,
      "widthPolicy" : "explicit"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "column" : -1,
      "fontFamily" : "inherit",
      "fontSize" : 20,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "name" : "valueLabel_80286",
      "row" : -1,
      "text" : "@com.vantiq.component.ui.DirectionDistanceEditor__label.distance",
      "type" : "StaticText",
      "uuid" : "b383d868-333a-428a-85f8-d7a0f12ff95e",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "5f5dc7d3-dc81-460f-81b1-f1dd486e32cd", "4e474b15-48ed-434c-8057-e7fcf199dd2d" ],
      "column" : -1,
      "componentConfiguration" : {
        "configurationProperties" : [ {
          "defaultValue" : {
            "points" : [ ]
          },
          "hidden" : true,
          "propertyLabel" : "editingObject",
          "propertyType" : 60,
          "type" : 1
        }, {
          "defaultValue" : null,
          "description" : "possible values are \"distance\" and \"direction\".",
          "hidden" : true,
          "propertyLabel" : "objectType",
          "propertyType" : 50,
          "type" : 1
        }, {
          "defaultValue" : null,
          "hidden" : false,
          "propertyLabel" : "imageUrl",
          "propertyType" : 50,
          "type" : 1
        }, {
          "defaultValue" : [ ],
          "hidden" : true,
          "propertyLabel" : "zonePoints",
          "propertyType" : 60,
          "type" : 1
        }, {
          "defaultValue" : "    configuration.editingObject = obj;\n    configuration.isLoadingZones = true;\n\n    var cameraLayout = client.getComponentWidget(configuration, \"imageLayout\");\n    var cameraCanvas = client.getComponentWidget(configuration, \"imageCanvas\");\n\n    if (configuration.imageUrl) {\n        // use the user defined url\n        cameraLayout.url = configuration.imageUrl;\n    }\n\n    configuration.objectType = \"distance\";\n    var labelWidget = client.getComponentWidget(configuration, \"valueLabel\");\n    labelWidget.text = client.formatMsg(\"@label.distance\");\n    var inputWidget = client.getComponentWidget(configuration, \"valueInput\");\n    if (cameraLayout.configuration.editingObject.direction !== undefined) {\n        configuration.objectType = \"direction\";\n        labelWidget.text = client.formatMsg(\"@label.direction\");\n        inputWidget.boundValue = cameraLayout.configuration.editingObject.direction;\n    } else if (cameraLayout.configuration.editingObject.distance) {\n        inputWidget.boundValue = cameraLayout.configuration.editingObject.distance;\n    }\n    // In order to get background image size  of the CameraLayout, need to have a timeout.\n    client.setTimeout(function()\n    {\n        // Resize the canvas to match the image.\n        var widthRatio = cameraLayout.scaledImageWidth/cameraLayout.trueImageWidth;\n        var heightRadio = cameraLayout.scaledImageHeight/cameraLayout.trueImageHeight;\n\n        cameraCanvas.w = Math.min(cameraLayout.w, cameraLayout.scaledImageWidth);\n        cameraCanvas.h = Math.min(cameraLayout.h, cameraLayout.scaledImageHeight);\n\n        cameraLayout.configuration.zonePoints = [];\n        if (!cameraLayout.configuration.editingObject.points || (cameraLayout.configuration.editingObject.points.length == 0)) {\n            // create a default line\n            var w = cameraLayout.trueImageWidth || 200;\n            var h = cameraLayout.trueImageHeight || 200;\n            var x = w/4;\n            var y = h/2;\n            var zoneWidth = w/2;\n\n            // create a resion with 4 corer points.\n            cameraLayout.configuration.editingObject.points = [{x: x, y: y},\n                {x:x+zoneWidth, y:y}\n            ];\n\n            if (configuration.objectType == \"direction\") {\n                inputWidget.boundValue = 0; // 0 degree for horizontal line\n            } else {\n                inputWidget.boundValue = zoneWidth; // use pixels for default.\n            }\n        }\n        // conver to zonePoints for display\n        cameraLayout.configuration.zonePoints = [];\n\n        // convert region points into the scaled image coordinates\n        for (var i = 0; i < cameraLayout.configuration.editingObject.points.length; i++) {\n            cameraLayout.configuration.zonePoints.push({\n                x: cameraLayout.configuration.editingObject.points[i].x * widthRatio,\n                y: cameraLayout.configuration.editingObject.points[i].y * heightRadio\n            });\n        }\n        // display the line\n        cameraCanvas.repaint();\n\n        // Setup Drag&Drop\n        var nativeCanvas = document.getElementById(cameraCanvas.name).children[0];\n        console.log(\"setup drag&drop on nativeCanvas: \"+nativeCanvas.id);\n        nativeCanvas.addEventListener('mousedown', function(e) {\n            console.log(\"mouse down on canvas\");\n            // check if clicked on one of the boundary points\n            cameraLayout.configuration.draggingPointIndex = -1;\n            for (var i = 0; i < cameraLayout.configuration.zonePoints.length; i++) {\n                var p = cameraLayout.configuration.zonePoints[i];\n                // calculate the distance between mouse click to point center\n                if (com.vantiq.component.ui.isClickedOnDNDPoint(nativeCanvas, p, e)) {\n                    // start dragging\n                    cameraLayout.configuration.draggingPointIndex = i;\n                    p.x = e.offsetX;\n                    p.y = e.offsetY;\n                    cameraCanvas.repaint();\n                    break;\n                }\n            }\n        });\n        nativeCanvas.addEventListener('mousemove', function(e) {\n            if ((e.offsetX < 1) || (e.offsetX > (cameraLayout.scaledImageWidth-1)) ||\n                (e.offsetY < 1) || (e.offsetY > (cameraLayout.scaledImageHeight-1))) {\n                // stop the drag&drop after touching the edge of background image.\n                cameraLayout.configuration.draggingPointIndex = -1;\n            } else if (cameraLayout.configuration.draggingPointIndex >=0 ) {\n                var p = cameraLayout.configuration.zonePoints[cameraLayout.configuration.draggingPointIndex];\n                // update the point and redraw\n                p.x = e.offsetX;\n                p.y = e.offsetY;\n                cameraCanvas.repaint();\n            }\n        });\n        nativeCanvas.addEventListener('mouseup', function(e) {\n            cameraLayout.configuration.draggingPointIndex = -1;\n        });   \n       \n        cameraLayout.configuration.isLoadingZones = false;\n    },500);    \n    ",
          "functionParameters" : [ "obj" ],
          "hidden" : false,
          "propertyLabel" : "loadObject",
          "propertyType" : 62,
          "type" : 1
        }, {
          "defaultValue" : "    var cameraLayout = client.getComponentWidget(configuration, \"imageLayout\");\n    var inputWidget = client.getComponentWidget(configuration, \"valueInput\");    \n    var widthRatio = cameraLayout.scaledImageWidth/cameraLayout.trueImageWidth;\n    var heightRadio = cameraLayout.scaledImageHeight/cameraLayout.trueImageHeight;\n    var savedPoints = [];\n    for (var i = 0; i < configuration.zonePoints.length; i++) {\n        savedPoints.push({\n            x: configuration.zonePoints[i].x / widthRatio,\n            y: configuration.zonePoints[i].y / heightRadio\n        });\n    }\n    configuration.editingObject.points = savedPoints;\n\n    if (configuration.objectType == \"direction\") {\n        configuration.editingObject.direction = inputWidget.boundValue;\n    } else {\n        // distance\n        configuration.editingObject.distance = inputWidget.boundValue;\n        if (!configuration.editingObject.distance || (configuration.editingObject.distance <0)) {\n            client.errorDialog(\"Distance must be a positive number.\");\n            return null;\n        }\n    }\n    return configuration.editingObject;",
          "description" : "Return the editing object if input is valid. Return null if error found in dialog.",
          "hidden" : false,
          "propertyLabel" : "getObject",
          "propertyType" : 62,
          "type" : 1
        }, {
          "defaultValue" : -1,
          "hidden" : true,
          "propertyLabel" : "draggingPointIndex",
          "propertyType" : 37,
          "type" : 1
        } ],
        "originalWidgetName" : "DirectionDistanceEditor"
      },
      "componentName" : "com.vantiq.component.ui.DirectionDistanceEditor",
      "componentSuffix" : "_80286",
      "componentTimestamp" : "2023-09-14T21:31:19.875Z",
      "heightPolicy" : "sizeToCell",
      "horzGravity" : "center",
      "innerMargin" : 20,
      "isComponent" : true,
      "name" : "dirdisComp",
      "row" : 0,
      "type" : "VerticalLayout",
      "uuid" : "bf984794-dcbe-4277-a51f-228badb85e60",
      "v" : 17,
      "vertGravity" : "center",
      "vertWeight" : 1,
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "children" : [ "84e0b4c5-d136-4c4b-8661-f8474c2c64ba", "ee5c053a-1332-4d3d-8ea6-ab2ba11ccdc5" ],
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "innerMargin" : 20,
      "name" : "HorizontalLayout107571",
      "row" : -1,
      "type" : "HorizontalLayout",
      "uuid" : "d60ebc98-3990-4ac0-8865-f2707ca389f4",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "sizeToCell"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.DirectionDistanceEditor__btn.change.image",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "right",
      "horzWeight" : 1,
      "name" : "changeBGBtn_80286",
      "row" : -1,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "dd69f535-6f3c-4908-b226-8d0f936b75f7",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    }, {
      "borderColor" : "Default",
      "borderRadius" : 4,
      "borderThickness" : 0,
      "buttonBackgroundColor" : "default",
      "buttonLabel" : "@com.vantiq.component.ui.BoundaryEditor__btn.OK",
      "buttonLabelColor" : "default",
      "buttonLabelSize" : 14,
      "buttonLabelStyle" : "bold",
      "column" : -1,
      "heightPolicy" : "naturalSize",
      "horzGravity" : "center",
      "name" : "dirdisBtnOK",
      "row" : -1,
      "submitValue" : 100,
      "type" : "Button",
      "uuid" : "ee5c053a-1332-4d3d-8ea6-ab2ba11ccdc5",
      "v" : 17,
      "vertGravity" : "center",
      "widthPolicy" : "naturalSize"
    } ]
  },
  "data" : {
    "properties" : { }
  },
  "footerChildren" : [ ],
  "hasFooter" : false,
  "layoutType" : "browser"
}