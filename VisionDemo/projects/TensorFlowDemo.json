{
  "links" : [ {
    "source" : "type/system.documents",
    "target" : "client/TFDemo"
  }, {
    "source" : "type/system.tensorflowmodels",
    "target" : "client/TFDemo"
  } ],
  "name" : "TensorFlowDemo",
  "options" : {
    "blacklist" : [ "procedure/vsExample", "topic//my/response/topic" ],
    "description" : "The main purpose of this demo is to showcase VANTIQ's integration with TensorFlow. This project includes a procedure that demonstrates TensorFlow object recognition support in a procedure called tfExample. \n\nA simple client TFDemo has been created that will allow users to upload an image to VANTIQ that will be processed through TensorFlow and the results displayed on the page. \n\nThe client also allows you to change the confidence threshold and model type for image classification and select images that the user has previously uploaded.\n\nBefore using the TfVisionDemo client make sure to upload a TensorFlow model. The easiest way to do this is using the CLI \"Load\" command: \nhttps://dev.vantiq.com/docs/system/cli/index.html#load\n\nBecause TensorFlow models are not uploaded to github because of the size constraints, here is a list of directions to follow to ensure that the demo gets set up correctly. \n\n1: Confirm that your computer has Java 8 running in order to run the VANTIQ CLI. If your computer does not have Java 8 installed - use homebrew to install adoptopenjdk and set your path to include the adoptopenjdk directory. To confirm that you have everything set up correctly run java -version to make sure you have 1.8.\n\n2: Confirm the VANTIQ CLI is functioning. If you do not have the VANTIQ CLI, click the question mark icon in the top right of your screen in the blue toolbar. Then click developer resources and scroll down to the CLI download. Follow those instructions. \n\n3: In order to load the model, you will need to create an access token so that VANTIQ recognizes you as a registered user. Change to the operations pane, then select the administer drop down menu, advanced, and access tokens. You will then need to create a new access token for this namespace. \n\n4: Now, you will need to create a directory that holds the necessary files (as described here: https://dev.vantiq.com/docs/system/cli/index.html#load). I wanted to include a way to use multiple different models, so I included coco-1.2, yolov3-1.0, and yolo_open_image-1.0, which I defaulted to calling yolo-1.0. You will need to download two files and then create the third within a directory corresponding to each model.\n\nHere are the coco files:\nhttp://vantiqmaven.s3.amazonaws.com/vantiq/models/coco/1.2/coco-1.2.meta\nhttp://vantiqmaven.s3.amazonaws.com/vantiq/models/coco/1.2/coco-1.2.pb\nFor the .json file, adding these line should suffice:\n{\n \"modelType\" : \"tensorflow/yolo\",\n \"name\" : \"coco-1.2\"\n}\n\nHere are the yolov3 files:\nhttp://vantiqmaven.s3.amazonaws.com/vantiq/models/yolov3/1.0/yolov3-1.0.meta\nhttp://vantiqmaven.s3.amazonaws.com/vantiq/models/yolov3/1.0/yolov3-1.0.pb\nFor the .json file, adding these line should suffice:\n{\n \"modelType\" : \"tensorflow/yolo\",\n \"name\" : \"yolov3-1.0\"\n}\n\nHere are the yolo open image files:\nhttps://vantiqmaven.s3-us-west-2.amazonaws.com/vantiq/models/yolo_open_image/1.0/yolo_open_image-1.0.meta\nhttps://vantiqmaven.s3-us-west-2.amazonaws.com/vantiq/models/yolo_open_image/1.0/yolo_open_image-1.0.pb\nFor the json file:\n{\n \"modelType\" : \"tensorflow/yolo\",\n \"name\" : \"yolo-1.0\"\n}\n\n5: Once you have those three files in a directory corresponding to the specific model, you can finally load the model to the namespace using a command similar to this:\nvantiq load tensorflowmodel coco-1.2 -t <accessToken> -b https://dev.vantiq.com -n tensorflow_demo\n\n\nOnce you have finished these steps, you are all set to run the demo. However, no there are no preloaded images in order to save space, so in order for the demo to run properly, you will have to download images to your computer and then upload once you have started the demo and are in the client. \n\n\n\nAdditional Documentation:\nTensorFlow: \nhttps://dev.vantiq.com/docs/system/imageprocessing/index.html#image-analysis\n\nPossible timeout error:\nIf an error that looks similar to this happens to you, it just means that the model is taking a while to load. If you wait a couple of minutes this error should resolve itself. \n\nHTTP error 400 ()\nCode: io.vantiq.cluster.message.timeout\nMessage: Timed out waiting for reply to message [address:/vantiq/resources/tensorflowmodels, user:io.vantiq.service.ServiceUser(5d1c883b-210e-4a8a-bf41-03dbe6cf748f, jvic12, vision_demo, [vision_demo.admin, vision_demo.admin__system]), namespaceName:vision_demo, op:execute, resourceName:tensorflowmodels, isSystemResource:true, resourceId:coco-1.2, object:[resourceRef:/documents/images/skiing.jpg, confidence:0.5], contentType:application/json, executionContext:[currentPrivilegedOp:null, currentExclusiveOps:null], isExternal:true, currentIdentifier:03917fd6-db5d-11ea-84a7-32bff0551ef0, debugConfig:[ars_namespace:vision_demo, enableTracing:false]] forwarded to io.vantiq.consumer.monitored.cluster.e6a16d29-ba65-4b80-9c25-ff1b879da6ac\nWhile: Executing 'MyService.MyProcedure'",
    "dockCollapsed" : {
      "bottom" : true,
      "left" : false,
      "right" : false,
      "top" : false
    },
    "dockDimensions" : {
      "bottom" : 200,
      "debug" : [ 0, 0, 0 ],
      "left" : 210,
      "right" : 220,
      "top" : 0
    },
    "dockSort" : 1,
    "filterBitArray" : "ffffffffffffffffffffffffffffffff",
    "isModeloProject" : true,
    "layoutStyle" : "tile",
    "openResourceFolders" : {
      "client" : true,
      "procedure" : true,
      "type" : true
    },
    "rootViewFlavor" : 1,
    "showGrid" : true,
    "tileColumns" : 2,
    "tileRows" : 2,
    "type" : "dev",
    "v" : 3,
    "viewUUID" : "MAINVIEW"
  },
  "resources" : [ {
    "inventory" : {
      "clientHash" : [ ],
      "clients" : [ ],
      "collaborationHash" : [ ],
      "collaborations" : [ ],
      "eventstreamHash" : [ ],
      "eventstreams" : [ ],
      "procedureHash" : [ ],
      "procedures" : [ ],
      "sourceHash" : [ ],
      "sources" : [ ],
      "systemmodelHash" : [ ],
      "systemmodels" : [ ],
      "topicHash" : [ ],
      "topics" : [ ],
      "typeHash" : [ "in", "in" ],
      "types" : [ "system.documents", "system.tensorflowmodels" ]
    },
    "label" : "TFDemo",
    "name" : "TFDemo",
    "node" : {
      "x" : 240.3,
      "y" : 30.8
    },
    "resourceReference" : "/system.clients/TFDemo",
    "timestamp" : "2020-11-02T21:35:55.763Z",
    "type" : 15
  }, {
    "label" : "system.documents",
    "name" : "system.documents",
    "node" : {
      "x" : 239.8,
      "y" : -24.8
    },
    "resourceReference" : "/types/system.documents",
    "timestamp" : "2020-03-18T00:32:42.861Z",
    "type" : 1
  }, {
    "label" : "system.tensorflowmodels",
    "name" : "system.tensorflowmodels",
    "node" : {
      "x" : -1.8,
      "y" : -24.7
    },
    "resourceReference" : "/types/system.tensorflowmodels",
    "timestamp" : "2020-03-18T00:33:10.572Z",
    "type" : 1
  }, {
    "inventory" : {
      "clientHash" : [ ],
      "clients" : [ ],
      "collaborationHash" : [ ],
      "collaborations" : [ ],
      "eventstreamHash" : [ ],
      "eventstreams" : [ ],
      "procedureHash" : [ "out" ],
      "procedures" : [ "TensorFlowOperation.processDocument" ],
      "sourceHash" : [ ],
      "sources" : [ ],
      "systemmodelHash" : [ ],
      "systemmodels" : [ ],
      "topicHash" : [ ],
      "topics" : [ ],
      "typeHash" : [ ],
      "types" : [ ]
    },
    "label" : "tfExample",
    "name" : "tfExample",
    "node" : {
      "x" : -7.6,
      "y" : 25.9
    },
    "resourceReference" : "/procedures/tfExample",
    "timestamp" : "2020-10-26T23:12:01.057Z",
    "type" : 3
  } ],
  "tools" : [ {
    "isPinned" : false,
    "name" : "Errors",
    "type" : 13
  }, {
    "dockLocation" : "top",
    "isPinned" : false,
    "name" : "Inactive Panes",
    "type" : 99
  }, {
    "isPinned" : false,
    "name" : "Project Contents",
    "type" : 2
  }, {
    "isPinned" : false,
    "name" : "Project Description",
    "pane" : {
      "c" : 0,
      "r" : 0
    },
    "state" : 2,
    "type" : 82
  }, {
    "isPinned" : false,
    "name" : "Project Resource Graph",
    "pane" : {
      "c" : 1,
      "r" : 1
    },
    "state" : 2,
    "toolOptions" : {
      "scaleAndTranslationState" : {
        "lastZoomRequest" : 0,
        "scale" : 0.7641882603825829,
        "translate" : [ 139.2367001120061, 133.7122791917945 ]
      }
    },
    "type" : 1
  }, {
    "isPinned" : false,
    "name" : "TFDemo",
    "pane" : {
      "c" : 0,
      "r" : 1
    },
    "resourceKey" : "client/TFDemo",
    "state" : 2,
    "type" : 63
  }, {
    "isPinned" : false,
    "name" : "tfExample",
    "pane" : {
      "c" : 1,
      "r" : 0
    },
    "resourceKey" : "procedure/tfExample",
    "state" : 2,
    "type" : 24
  } ],
  "type" : "dev",
  "views" : [ {
    "name" : "Project Contents",
    "projectToolKeys" : [ "errorviewer/Errors", "tiledock/Inactive Panes", "list/Project Contents", "projectdescription/Project Description", "graph/Project Resource Graph", "client/TFDemo", "cmeditorprocedure/tfExample" ]
  } ]
}